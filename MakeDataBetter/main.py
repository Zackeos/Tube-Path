import json
for stations in "1":
  stations = """Acton Town
Aldgate
Aldgate East
All Saints
Alperton
Angel
Archway
Arnos Grove
Arsenal
Baker Street
Balham
Bank
Barbican
Barking
Barkingside
Barons Court
Bayswater
Beckton
Beckton Park
Becontree
Belsize Park
Bethnal Green
Blackfriars
Blackhorse Road
Blackwall
Bond Street
Borough
Boston Manor
Bounds Green
Bow Church
Bow Road
Brent Cross
Bromley-By-Bow
Burnt Oak
Caledonian Road
Camden Town
Canary Wharf
Cannon Street
Canons Park
Chalk Farm
Chancery Lane
Charing Cross
Chigwell
Chiswick Park
Clapham Common
Clapham North
Clapham South
Colindale
Colliers Wood
Covent Garden
Crossharbour & London Arena
Custom House
Cyprus
Dagenham East
Dagenham Heathway
Devons Road
Dollis Hill
Ealing Broadway
Ealing Common
Earl's Court
Eastcote
East Acton
East Finchley
East Ham
East India
East Putney
Edgware
Edgware Road (B)
Edgware Road (C)
Elephant & Castle
Elm Park
Embankment
Euston
Euston Square
Fairlop
Farringdon
Finchley Central
Finchley Road
Finsbury Park
Fulham Broadway
Gallions Reach
Gants Hill
Gloucester Road
Golders Green
Goldhawk Road
Goodge Street
Grange Hill
Great Portland Street
Greenford
Green Park
Gunnersbury
Hainault
Hammersmith
Hampstead
Hanger Lane
Harlesden
Harrow & Wealdston
Harrow-on-the-Hill
Hatton Cross
Heathrow Terminals 1, 2 & 3
Heathrow Terminal 4
Hendon Central
Heron Quays
High Street Kensington
Highbury & Islington
Highgate
Hillingdon
Holborn
Holland Park
Holloway Road
Hornchurch
Hounslow Central
Hounslow East
Hounslow West
Hyde Park Corner
Ickenham
Island Gardens
Kennington
Kensal Green
Kensington (Olympia)
Kentish Town
Kenton
Kew Gardens
Kilburn
Kilburn Park
Kingsbury
King's Cross St. Pancras
Knightsbridge
Ladbroke Grove
Lambeth North
Lancaster Gate
Latimer Road
Leicester Square
Leyton
Leytonstone
Limehouse
Liverpool Street
London Bridge
Maida Vale
Manor House
Mansion House
Marble Arch
Marylebone
Mile End
Mill Hill East
Monument
Moorgate
Moor Park
Morden
Mornington Crescent
Mudchute
Neasden
Newbury Park
Northfields
Northolt
Northwick Park
Northwood
Northwood Hills
North Acton
North Ealing
North Harrow
North Wembley
Notting Hill Gate
Old Street
Osterley
Oval
Oxford Circus
Paddington
Park Royal
Parsons Green
Perivale
Picadilly Circus
Pimlico
Pinner
Plaistow
Poplar
Preston Road
Prince Regent
Putney Bridge
Queen's Park
Queensbury
Queensway
Ravenscourt Park
Rayners Lane
Redbridge
Regent's Park
Richmond
Roding Valley
Rotherhithe
Royal Albert
Royal Oak
Royal Victoria
Ruislip
Ruislip Manor
Russell Square
Seven Sisters
Shadwell
Shepherd's Bush (C)
Shepherd's Bush (H)
Shoreditch
Sloane Square
Snaresbrook
Southfields
South Ealing
South Harrow
South Kensington
South Kenton
South Quay
South Ruislip
South Wimbledon
South Woodford
Stamford Brook
Stanmore
Stepney Green
Stockwell
Stonebridge Park
Stratford
St. James's Park
St. John's Wood
St. Paul's
Sudbury Hill
Sudbury Town
Surrey Quays
Swiss Cottage
Temple
Tooting Bec
Tooting Broadway
Tottenham Court Road
Tottenham Hale
Tower Gateway
Tower Hill
Tufnell Park
Turnham Green
Turnpike Lane
Upminster
Upminster Bridge
Upney
Upton Park
Uxbridge
Vauxhall
Victoria
Walthamstow Central
Wanstead
Wapping
Warren Street
Warwick Avenue
Waterloo
Wembley Central
Wembley Park
Westbourne Park
Westferry
Westminster
West Acton
West Brompton
West Finchley
West Ham
West Hampstead
West Harrow
West India Quay
West Kensington
West Ruislip
Whitechapel
White City
Willesden Green
Willesden Junction
Wimbledon
Wimbledon Park
Woodford
Woodside Park
Wood Green
Brixton
Amersham
Bermondsey
Chesham
Chalfont & Latimer
Chorleywood
Rickmansworth
Croxley
Watford
Ruislip Gardens
High Barnet
Totteridge & Whetstone
Cockfosters
Oakwood
Southgate
Epping
Theydon Bois
Debden
Loughton
Buckhurst Hill
Pudding Mill Lane
Southwark
Canada Water
Canning Town
North Greenwich
Cutty Sark
Greenwich
Deptford Bridge
Elverson Road
Lewisham
New Cross
New Cross Gate
"""
for latitudes in "1":
  latitudes ="""51.5028
51.5143
51.5154
51.5107
51.5407
51.5322
51.5653
51.6164
51.5586
51.5226
51.4431
51.5133
51.5204
51.5396
51.5856
51.4905
51.5121
51.5148
51.5087
51.5403
51.5504
51.527
51.512
51.5867
51.5079
51.5142
51.5011
51.4956
51.6071
51.5273
51.5269
51.5766
51.5248
51.6028
51.5481
51.5392
51.5051
51.5113
51.6078
51.5441
51.5185
51.508
51.6177
51.4946
51.4618
51.4649
51.4527
51.5955
51.418
51.5129
51.4957
51.5095
51.5085
51.5443
51.5417
51.5223
51.552
51.5152
51.5101
51.492
51.5765
51.5168
51.5874
51.5394
51.5093
51.4586
51.6137
51.5199
51.5203
51.4943
51.5496
51.5074
51.5282
51.526
51.596
51.5203
51.6012
51.5472
51.5642
51.4804
51.5096
51.5765
51.4945
51.5724
51.5018
51.5205
51.6132
51.5238
51.5423
51.5067
51.4915
51.603
51.4936
51.5568
51.5302
51.5362
51.5925
51.5793
51.4669
51.4713
51.4598
51.5829
51.5033
51.5009
51.546
51.5777
51.5538
51.5174
51.5075
51.5526
51.5539
51.4713
51.4733
51.4734
51.5027
51.5619
51.4871
51.4884
51.5304
51.4983
51.5507
51.5816
51.477
51.5471
51.5351
51.5846
51.5308
51.5015
51.5172
51.4991
51.5119
51.5139
51.5113
51.5566
51.5683
51.5123
51.5178
51.5052
51.53
51.5712
51.5122
51.5136
51.5225
51.5249
51.6082
51.5108
51.5186
51.6294
51.4022
51.5342
51.4902
51.5542
51.5756
51.4995
51.5483
51.5784
51.6111
51.6004
51.5237
51.5175
51.5846
51.5621
51.5094
51.5263
51.4813
51.4819
51.515
51.5154
51.527
51.4753
51.5366
51.5098
51.4893
51.5926
51.5313
51.5077
51.572
51.5093
51.4682
51.5341
51.5942
51.5107
51.4942
51.5753
51.5763
51.5234
51.4633
51.6171
51.501
51.5084
51.519
51.5091
51.5715
51.5732
51.523
51.5822
51.5117
51.5046
51.5058
51.5227
51.4924
51.5808
51.4454
51.5011
51.5646
51.4941
51.5701
51.5007
51.5569
51.4154
51.5917
51.495
51.6194
51.5221
51.4723
51.5439
51.5416
51.4994
51.5347
51.5146
51.5569
51.5507
51.4933
51.5432
51.5111
51.4361
51.4275
51.5165
51.5882
51.5106
51.5098
51.5567
51.4951
51.5904
51.559
51.5582
51.5385
51.5352
51.5463
51.4861
51.4965
51.583
51.5775
51.5043
51.5247
51.5235
51.5036
51.5519
51.5635
51.521
51.5097
51.501
51.518
51.4872
51.6095
51.5287
51.5469
51.5795
51.507
51.4907
51.5696
51.5194
51.512
51.5492
51.5326
51.4214
51.4343
51.607
51.6179
51.5975
51.4627
51.6736
51.4979
51.7052
51.6679
51.6543
51.6404
51.647
51.6573
51.5606
51.6503
51.6302
51.6517
51.6476
51.6322
51.6937
51.6717
51.6455
51.6412
51.6266
51.5343
51.501
51.4982
51.5147
51.5005
51.4827
51.4781
51.474
51.4693
51.4657
51.4767
51.4757
"""
latitudes = latitudes.split("\n")
latitudes.pop(-1)
for longitudes in "1":
  longitudes ="""-0.2801
-0.0755
-0.0726
-0.013
-0.2997
-0.1058
-0.1353
-0.1331
-0.1059
-0.1571
-0.1525
-0.0886
-0.0979
0.081
0.0887
-0.2139
-0.1879
0.0613
0.055
0.127
-0.1642
-0.0549
-0.1031
-0.0417
-0.0066
-0.1494
-0.0943
-0.325
-0.1243
-0.0208
-0.0247
-0.2136
-0.0119
-0.2641
-0.1188
-0.1426
-0.0209
-0.0904
-0.2947
-0.1538
-0.1111
-0.1247
0.0755
-0.2678
-0.1384
-0.1299
-0.148
-0.2502
-0.1778
-0.1243
-0.0144
0.0276
0.064
0.1655
0.1469
-0.0173
-0.2387
-0.3017
-0.2882
-0.1973
-0.397
-0.2474
-0.165
0.0518
-0.0021
-0.2112
-0.275
-0.1679
-0.17
-0.1001
0.1977
-0.1223
-0.1337
-0.1359
0.0912
-0.1053
-0.1932
-0.1803
-0.1065
-0.195
0.0716
0.0663
-0.1829
-0.1941
-0.2267
-0.1347
0.0923
-0.1439
-0.3456
-0.1428
-0.2754
0.0933
-0.2251
-0.178
-0.2933
-0.2575
-0.3351
-0.3366
-0.4227
-0.4524
-0.4476
-0.2259
-0.0215
-0.1925
-0.104
-0.1458
-0.4499
-0.12
-0.206
-0.1132
0.2184
-0.3665
-0.3564
-0.3855
-0.1527
-0.4421
-0.0101
-0.1053
-0.225
-0.2106
-0.1402
-0.3162
-0.285
-0.2047
-0.1939
-0.2786
-0.1238
-0.1607
-0.2107
-0.1115
-0.1756
-0.2172
-0.1281
-0.0053
0.0083
-0.0396
-0.0823
-0.0864
-0.1854
-0.0958
-0.094
-0.1586
-0.1631
-0.0332
-0.2103
-0.0863
-0.0886
-0.432
-0.1948
-0.1387
-0.0145
-0.2503
0.0899
-0.3142
-0.3687
-0.3184
-0.424
-0.4092
-0.2597
-0.2887
-0.3626
-0.3034
-0.1967
-0.0873
-0.3522
-0.113
-0.1415
-0.1755
-0.2841
-0.2011
-0.3232
-0.1342
-0.1334
-0.3805
0.0172
-0.0173
-0.2954
0.0336
-0.2089
-0.2047
-0.2861
-0.1877
-0.2359
-0.3714
0.0454
-0.1466
-0.3013
0.0439
-0.0525
0.0465
-0.188
0.0181
-0.4213
-0.4125
-0.1244
-0.0749
-0.056
-0.2187
-0.2265
-0.0708
-0.1565
0.0216
-0.2066
-0.3072
-0.3521
-0.1738
-0.3081
-0.0191
-0.3988
-0.1919
0.0275
-0.2459
-0.3028
-0.047
-0.123
-0.2759
-0.0042
-0.1335
-0.174
-0.0973
-0.3366
-0.3156
-0.0478
-0.1738
-0.1141
-0.1598
-0.168
-0.131
-0.0594
-0.0743
-0.0766
-0.1374
-0.2547
-0.1028
0.251
0.2343
0.1014
0.0343
-0.4786
-0.1253
-0.1447
-0.0195
0.0288
-0.0558
-0.1384
-0.1835
-0.1143
-0.2963
-0.2795
-0.2011
-0.0265
-0.1254
-0.2809
-0.1953
-0.1883
0.0056
-0.1906
-0.3533
-0.0203
-0.2065
-0.4376
-0.0612
-0.2239
-0.2215
-0.2478
-0.2064
-0.1992
0.0341
-0.1856
-0.1097
-0.1145
-0.607
-0.0637
-0.611
-0.561
-0.5183
-0.4733
-0.4412
-0.4177
-0.4103
-0.1943
-0.1791
-0.1496
-0.1318
-0.128
0.1139
0.1033
0.0838
0.0558
0.0471
-0.0139
-0.1052
-0.0502
0.0082
0.0039
-0.0096
-0.0149
-0.0216
-0.0174
-0.0142
-0.0327
-0.0402
"""
longitudes = longitudes.split("\n")
longitudes.pop(-1)
stations = stations.split("\n")
stations.pop(-1)
for keys in "1":
  keys ="""1
2
3
4
5
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
24
25
26
27
28
29
30
31
32
33
34
36
38
39
40
42
44
45
47
48
49
51
52
54
55
56
58
59
60
61
63
65
66
67
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
87
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
107
108
109
110
111
112
113
114
115
116
117
118
119
120
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
153
154
155
156
157
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
176
177
178
179
180
181
182
184
185
186
188
190
191
192
193
194
195
196
197
198
199
200
201
202
203
205
206
207
208
209
210
211
212
213
215
216
217
218
219
220
222
223
224
225
226
227
228
229
230
231
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
257
258
259
260
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
35
6
23
50
46
53
214
62
280
221
121
261
57
187
232
88
256
68
158
37
204
233
41
43
183
64
106
69
86
152
174
175
"""
keys = keys.split("\n")
keys.pop(-1)
stationsDict = {}
for x in range(len(keys)):
  stationsDict[int(keys[x])] = x+1
with open("Stations.txt","w") as f:
  for k in range(len(stations)):
    f.write(stations[k]+"#"+latitudes[k]+"#"+longitudes[k]+"\n")
for linksa in "1":
  linksa ="""11
11
49
49
82
82
84
87
113
113
114
137
137
140
143
143
148
159
185
185
192
192
193
246
13
13
16
16
24
24
28
28
37
37
48
48
51
51
68
68
72
76
76
88
91
98
98
103
105
105
112
112
126
127
127
149
149
153
153
154
154
164
177
181
186
192
211
215
221
221
226
230
241
2
2
11
11
14
14
18
18
25
25
44
44
83
87
87
90
90
92
99
99
122
156
166
229
229
248
248
3
3
15
15
17
17
18
18
21
21
25
25
33
33
36
44
44
52
52
66
66
72
73
74
74
74
74
74
78
80
80
83
85
87
87
96
96
99
108
108
110
122
129
141
164
166
195
200
200
209
229
229
231
242
244
248
248
267
299
4
4
13
19
20
20
27
27
32
32
42
42
43
43
61
61
63
63
64
64
65
69
69
86
120
135
155
155
201
201
203
204
225
284
41
41
174
175
216
225
225
228
3
3
11
11
14
14
15
33
33
36
78
83
90
90
92
101
101
147
147
150
156
164
193
200
200
218
244
11
11
23
23
28
41
42
43
43
45
45
71
71
94
94
107
142
142
144
144
157
172
233
247
249
279
2
6
11
11
14
14
46
46
53
62
62
75
75
90
90
92
94
115
115
115
125
125
134
156
168
168
178
179
180
184
202
210
220
7
7
8
8
12
12
13
13
22
22
29
29
34
34
38
38
40
40
40
40
49
49
54
54
55
58
59
59
77
77
84
87
89
89
89
93
93
100
102
102
121
136
136
139
151
167
169
191
257
261
288
1
1
1
5
5
9
9
10
10
17
17
30
30
31
39
39
57
60
60
73
74
75
75
95
99
107
107
110
116
116
116
117
125
125
126
130
130
131
133
134
145
146
151
160
176
182
187
210
220
235
251
266
26
26
35
89
89
95
95
107
107
123
192
198
198
224
245
13
"""
for linksb in "1":
  linksb = """163
212
87
197
163
193
148
279
246
298
140
206
298
237
159
206
279
278
237
281
197
212
278
281
156
250
91
173
156
164
162
192
158
301
126
250
103
215
158
256
286
181
296
256
109
173
211
109
177
196
181
196
259
186
226
162
208
154
247
230
275
247
239
286
208
259
275
301
239
294
296
241
301
156
263
83
104
92
167
186
193
161
255
161
166
193
255
285
104
145
145
122
236
186
167
263
236
273
273
285
263
295
78
269
110
293
186
193
67
269
161
255
36
164
289
161
166
1
265
67
85
73
1
99
122
138
287
293
270
205
231
193
129
255
285
195
287
236
141
265
209
186
268
213
244
263
205
270
289
242
236
273
300
265
295
273
285
268
300
70
201
225
97
65
217
79
201
70
204
120
292
79
219
171
238
203
219
106
135
97
86
106
152
238
171
225
284
284
292
217
247
262
292
216
253
253
253
276
276
295
295
156
295
83
104
92
167
78
36
164
289
270
193
104
145
145
110
227
150
283
227
167
244
218
270
289
283
295
28
249
41
157
107
42
183
183
289
207
243
172
297
254
290
285
290
297
207
282
233
282
279
289
254
285
156
46
94
104
92
167
50
53
214
168
280
210
222
104
145
145
282
178
184
291
134
271
220
167
179
214
202
180
199
199
282
291
222
145
188
124
264
56
257
157
167
47
111
84
157
100
119
58
81
47
89
139
170
87
151
55
56
245
119
240
258
93
124
136
279
145
170
277
165
288
111
259
277
261
191
279
264
259
188
240
245
258
302
302
73
234
265
194
252
31
232
95
128
74
110
176
190
303
128
145
187
126
151
182
99
210
222
160
236
133
197
265
117
118
132
118
134
271
223
131
132
190
146
220
223
236
197
266
234
194
232
235
222
251
252
303
260
274
245
145
277
123
224
192
273
145
277
272
273
260
272
279
"""
for linksc in "1":
  linksc = """11
11
49
49
82
82
84
87
113
113
114
137
137
140
143
143
148
159
185
185
192
192
193
246
13
13
16
16
24
24
28
28
37
37
48
48
51
51
68
68
72
76
76
88
91
98
98
103
105
105
112
112
126
127
127
149
149
153
153
154
154
164
177
181
186
192
211
215
221
221
226
230
241
2
2
11
11
14
14
18
18
25
25
44
44
83
87
87
90
90
92
99
99
122
156
166
229
229
248
248
3
3
15
15
17
17
18
18
21
21
25
25
33
33
36
44
44
52
52
66
66
72
73
74
74
74
74
74
78
80
80
83
85
87
87
96
96
99
108
108
110
122
129
141
164
166
195
200
200
209
229
229
231
242
244
248
248
267
299
4
4
13
19
20
20
27
27
32
32
42
42
43
43
61
61
63
63
64
64
65
69
69
86
120
135
155
155
201
201
203
204
225
284
41
41
174
175
216
225
225
228
3
3
11
11
14
14
15
33
33
36
78
83
90
90
92
101
101
147
147
150
156
164
193
200
200
218
244
11
11
23
23
28
41
42
43
43
45
45
71
71
94
94
107
142
142
144
144
157
172
233
247
249
279
2
6
11
11
14
14
46
46
53
62
62
75
75
90
90
92
94
115
115
115
125
125
134
156
168
168
178
179
180
184
202
210
220
7
7
8
8
12
12
13
13
22
22
29
29
34
34
38
38
40
40
40
40
49
49
54
54
55
58
59
59
77
77
84
87
89
89
89
93
93
100
102
102
121
136
136
139
151
167
169
191
257
261
288
1
1
1
5
5
9
9
10
10
17
17
30
30
31
39
39
57
60
60
73
74
75
75
95
99
107
107
110
116
116
116
117
125
125
126
130
130
131
133
134
145
146
151
160
176
182
187
210
220
235
251
266
26
26
35
89
89
95
95
107
107
123
192
198
198
224
245
13
"""
for linksd in "1":
  linksd = """163
212
87
197
163
193
148
279
246
298
140
206
298
237
159
206
279
278
237
281
197
212
278
281
156
250
91
173
156
164
162
192
158
301
126
250
103
215
158
256
286
181
296
256
109
173
211
109
177
196
181
196
259
186
226
162
208
154
247
230
275
247
239
286
208
259
275
301
239
294
296
241
301
156
263
83
104
92
167
186
193
161
255
161
166
193
255
285
104
145
145
122
236
186
167
263
236
273
273
285
263
295
78
269
110
293
186
193
67
269
161
255
36
164
289
161
166
1
265
67
85
73
1
99
122
138
287
293
270
205
231
193
129
255
285
195
287
236
141
265
209
186
268
213
244
263
205
270
289
242
236
273
300
265
295
273
285
268
300
70
201
225
97
65
217
79
201
70
204
120
292
79
219
171
238
203
219
106
135
97
86
106
152
238
171
225
284
284
292
217
247
262
292
216
253
253
253
276
276
295
295
156
295
83
104
92
167
78
36
164
289
270
193
104
145
145
110
227
150
283
227
167
244
218
270
289
283
295
28
249
41
157
107
42
183
183
289
207
243
172
297
254
290
285
290
297
207
282
233
282
279
289
254
285
156
46
94
104
92
167
50
53
214
168
280
210
222
104
145
145
282
178
184
291
134
271
220
167
179
214
202
180
199
199
282
291
222
145
188
124
264
56
257
157
167
47
111
84
157
100
119
58
81
47
89
139
170
87
151
55
56
245
119
240
258
93
124
136
279
145
170
277
165
288
111
259
277
261
191
279
264
259
188
240
245
258
302
302
73
234
265
194
252
31
232
95
128
74
110
176
190
303
128
145
187
126
151
182
99
210
222
160
236
133
197
265
117
118
132
118
134
271
223
131
132
190
146
220
223
236
197
266
234
194
232
235
222
251
252
303
260
274
245
145
277
123
224
192
273
145
277
272
273
260
272
279
"""
linksa = linksa.split("\n")
linksa.pop(-1)
linksb = linksb.split("\n")
linksb.pop(-1)
linksc = linksc.split("\n")
linksc.pop(-1)
linksd = linksd.split("\n")
linksd.pop(-1)

#print(len(linksa),len(linksb),len(linksc),len(linksd))
routesa = [[linksa[x],linksb[x]] for x in range(len(linksa))]

routesb = [[linksd[x],linksc[x]] for x in range(len(linksa))]
routesa+=routesb
for z in range(len(routesa)):
  for p in range(len(routesa[z])):
    routesa[z][p] = stationsDict[int(routesa[z][p])]
    

linesnames = {1:"Bakerloo",2:"Central",12:"Waterloo and City",11:"Victoria",10:"Piccadilly",9:"Northern",8:"Metropolitan",7:"Jubilee",6:"Hammersmith and City",4:"District",13:"Docklands Light Railway",3:"Circle",5:"Overground"}
for times in "1":
  times = """1
2
1
2
2
3
3
2
2
2
2
3
3
2
2
2
1
1
2
2
2
2
2
3
2
2
2
2
3
2
1
1
3
3
1
2
2
2
2
3
3
2
3
2
2
3
2
3
2
2
3
2
2
2
1
3
1
3
2
2
2
4
3
2
2
2
2
3
1
3
3
2
2
2
4
3
3
1
2
2
2
1
2
1
2
3
2
2
2
2
4
4
1
3
2
2
2
2
2
2
2
2
4
2
1
2
2
2
3
2
1
2
2
1
2
1
2
2
2
4
3
4
2
3
3
2
2
1
2
2
2
3
2
2
2
2
1
1
3
3
2
3
2
3
2
2
3
2
2
2
2
2
3
1
3
2
2
3
3
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
1
2
4
4
1
1
2
2
4
2
3
3
1
2
4
2
1
2
2
4
2
2
4
2
1
1
2
2
2
2
1
2
2
2
3
2
4
2
3
2
3
3
3
3
2
2
2
2
2
1
3
2
2
2
4
2
4
1
3
1
2
2
4
6
3
1
2
8
4
4
4
3
2
2
2
2
4
7
2
3
2
2
3
3
2
3
4
2
2
2
3
3
3
2
2
3
3
2
2
1
2
3
2
2
1
2
3
2
2
3
2
3
2
1
1
2
2
2
1
3
2
2
4
2
2
2
2
2
1
3
2
4
1
2
3
2
3
2
1
1
4
3
2
3
1
2
4
3
3
2
3
3
2
1
3
2
2
3
2
2
5
4
1
1
3
2
2
2
2
1
2
1
2
3
3
4
5
2
3
2
2
2
2
2
3
2
3
2
3
1
2
3
3
2
2
3
2
2
2
2
2
1
2
4
2
2
4
2
1
3
3
3
4
1
2
1
2
2
3
3
2
2
2
2
3
3
2
2
2
1
1
2
2
2
2
2
3
2
2
2
2
3
2
1
1
3
3
1
2
2
2
2
3
3
2
3
2
2
3
2
3
2
2
3
2
2
2
1
3
1
3
2
2
2
4
3
2
2
2
2
3
1
3
3
2
2
2
4
3
3
1
2
2
2
1
2
1
2
3
2
2
2
2
4
4
1
3
2
2
2
2
2
2
2
2
4
2
1
2
2
2
3
2
1
2
2
1
2
1
2
2
2
4
3
4
2
3
3
2
2
1
2
2
2
3
2
2
2
2
1
1
3
3
2
3
2
3
2
2
3
2
2
2
2
2
3
1
3
2
2
3
3
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
1
2
4
4
1
1
2
2
4
2
3
3
1
2
4
2
1
2
2
4
2
2
4
2
1
1
2
2
2
2
1
2
2
2
3
2
4
2
3
2
3
3
3
3
2
2
2
2
2
1
3
2
2
2
4
2
4
1
3
1
2
2
4
6
3
1
2
8
4
4
4
3
2
2
2
2
4
7
2
3
2
2
3
3
2
3
4
2
2
2
3
3
3
2
2
3
3
2
2
1
2
3
2
2
1
2
3
2
2
3
2
3
2
1
1
2
2
2
1
3
2
2
4
2
2
2
2
2
1
3
2
4
1
2
3
2
3
2
1
1
4
3
2
3
1
2
4
3
3
2
3
3
2
1
3
2
2
3
2
2
5
4
1
1
3
2
2
2
2
1
2
1
2
3
3
4
5
2
3
2
2
2
2
2
3
2
3
2
3
1
2
3
3
2
2
3
2
2
2
2
2
1
2
4
2
2
4
2
1
3
3
3
4
"""
times = times.split("\n")
times.pop(-1)
for lines in "1":
  lines = """1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
5
5
5
5
5
5
5
5
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
12
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
2
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
3
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
4
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
13
5
5
5
5
5
5
5
5
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
6
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
7
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
8
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
9
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
10
11
11
11
11
11
11
11
11
11
11
11
11
11
11
11
12
"""
lines = lines.split("\n")
lines.pop(-1)

for x in range(len(routesa)):
  routesa[x].append(int(times[x]))
  routesa[x].append(linesnames[int(lines[x])])

with open('info.json', 'w') as outfile:
   json.dump(routesa, outfile)
